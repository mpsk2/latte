{
    parserClass = 'pl.mpsk2.latte.parser.LatteParser'

    extends = 'pl.mpsk2.latte.psi.impl.LatteCompositeElementImpl'

    psiClassPrefix = 'Latte'
    psiImplClassSuffix = 'Impl'
    psiPackage = 'pl.mpsk2.latte.psi'
    psiImplPackage = 'pl.mpsk2.latte.psi.impl'
    psiImplUtilClass = 'pl.mpsk2.latte.psi.impl.LattePsiImplUtil'
    parserUtilClass = 'pl.mpsk2.latte.parser.LatteParserUtil'

    elementTypeHolderClass = 'pl.mpsk2.latte.psi.LatteTypes'
    elementTypeClass = 'pl.mpsk2.latte.psi.tree.LatteElementType'
    tokenTypeClass = 'pl.mpsk2.latte.psi.tree.LatteTokenType'
    psiTreeUtilClass = 'pl.mpsk2.latte.psi.util.LattePsiTreeUtil'

    tokens = [
        SEM       = ";"

        LBRACE    = "{"
        LBRACK    = "["
        LPAREN    = "("
        RBRACE    = "}"
        RBRACK    = "]"
        RPAREN    = ")"
        COMMA     = ","

        INT       = "int"
        BOOL      = "boolean"
        STR       = "string"
        VOID      = "void"

        AND       = "&&"
        OR        = "||"
        ADD       = "+"
        SUB       = "-"
        MUL       = "*"
        DIV       = "/"
        MOD       = "%"
        LT        = "<"
        LEQ       = "<="
        GT        = ">"
        GEQ       = ">="
        EQ        = "=="
        NEQ       = "!="
        NOT       = "!"

        ASS       = "="
        INCR      = "++"
        DECR      = "--"

        RETURN    = "return"
        IF        = "if"
        ELSE      = 'else'
        WHILE     = "while"
        FOR       = "for"

        TRUE      = "true"
        FALSE     = "false"

        CLS       = "class"

        space     = 'regexp:\s+'
        line_comment   = 'regexp:(//|#).*'
        block_comment = 'regexp:/\*(.|\n)*\*/'
        number    = 'regexp:\d+(\.\d*)?'
        id        = 'regexp:\p{Alpha}\w*'
        string    = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    ]

    extends(".*Stmt") = Stmt
    psiPackage(".*Stmt") = 'pl.mpsk2.latte.psi.stmt'
    psiImplPackage(".*Stmt") = 'pl.mpsk2.latte.psi.impl.stmt'

    extends("(Or|And|Cmp|Add|Mul)Expr") = BinaryExpr
    pin("(Or|And|Cmp|Add|Mul)Expr") = 2
    extends(".*Expr") = Expr
    psiPackage(".*Expr")="pl.mpsk2.latte.psi.expr"
    psiImplPackage(".*Expr")="pl.mpsk2.latte.psi.impl.expr"

    generateTokenAccessors=true
}

Program ::= TopDef*

TopDef ::=
      ClsDef
    | FnDef

FnDef ::= Type Ident LPAREN ArgVec? RPAREN Block

Arg ::= Type Ident
ArgVec ::= Arg (COMMA Arg)*

Block ::= LBRACE Stmt* RBRACE {pin=1}

Stmt ::=
      EmptyStmt
    | BStmt
    | DeclStmt
    | AssStmt
    | IncrStmt
    | DecrStmt
    | RetStmt
    | VRetStmt
    | CondElseStmt
    | WhileStmt
    | ExprStmt

EmptyStmt ::= SEM
BStmt ::= Block
DeclStmt ::= Type ItemVec SEM {pin=1}
AssStmt ::= Ident ASS Expr SEM {pin=2}
IncrStmt ::= Ident INCR SEM {pin=2}
DecrStmt ::= Ident DECR SEM {pin=2}
RetStmt ::= RETURN Expr? SEM {pin=1}
VRetStmt ::= RETURN SEM
CondElseStmt ::= IF LPAREN Expr RPAREN Stmt (ELSE Stmt)? {pin=1}
WhileStmt ::= WHILE LPAREN Expr RPAREN Stmt {pin=1}
ExprStmt ::= Expr SEM {pin=1}

Type ::= INT | STR | BOOL | VOID

Item ::= Ident (ASS Expr)?
ItemVec ::= Item (COMMA Item)*

Expr ::=
      OrExpr
    | AndExpr
    | CmpExpr
    | AddExpr
    | MulExpr
    | NotExpr
    | NegExpr
    | AppExpr
    | ParenExpr
    | VarExpr
    | LitExpr

fake BinaryExpr ::= Expr+ {
    methods=[lhs="Expr[0]" rhs="Expr[1]"]
}

OrExpr  ::= Expr OR Expr
AndExpr ::= Expr AND Expr
AddExpr ::= Expr AddOp Expr
MulExpr ::= Expr MulOp Expr
NotExpr ::= NOT Expr {pin=1}
NegExpr ::= SUB Expr {pin=1}
AppExpr ::= Ident LPAREN ExprVec? RPAREN
CmpExpr ::= Expr CmpOp Expr
ParenExpr ::= LPAREN Expr RPAREN {pin=1}
VarExpr ::= Ident
LitExpr ::= number | string | TRUE | FALSE

ExprVec ::= Expr (COMMA Expr)?

private AddOp ::= ADD | SUB
private MulOp ::= MUL | DIV | MOD
private CmpOp ::= LT | LEQ | GT | GEQ | EQ | NEQ

Ident ::= id

// Extension structs

ClsDef ::= CLS Ident LBRACE RBRACE {pin=1}